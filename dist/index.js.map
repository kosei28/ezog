{"version":3,"file":"index.js","sources":["../src/font.ts","../src/text.ts","../src/svg.ts","../src/generate.ts"],"sourcesContent":["import { EzogGoogleFont } from './type';\n\nexport async function loadGoogleFont(font: string, text: string, fetch = globalThis.fetch) {\n    const API = `https://fonts.googleapis.com/css2?family=${font}&text=${encodeURIComponent(text)}`;\n\n    const css = await (\n        await fetch(API, {\n            headers: {\n                'User-Agent':\n                    'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1'\n            }\n        })\n    ).text();\n\n    const resource = css.match(/src: url\\((.+)\\) format\\('(opentype|truetype)'\\)/);\n\n    if (resource) {\n        const res = await fetch(resource[1]);\n        if (res.status == 200) {\n            return await res.arrayBuffer();\n        }\n    }\n}\n\nconst googleFonts = [\n    'Noto+Sans',\n    'Noto+Sans+JP',\n    'Noto+Sans+SC',\n    'Noto+Sans+KR',\n    'Noto+Sans+Thai',\n    'Noto+Sans+Hebrew',\n    'Noto+Sans+Arabic',\n    'Noto+Sans+Bengali',\n    'Noto+Sans+Tamil',\n    'Noto+Sans+Telugu',\n    'Noto+Sans+Malayalam',\n    'Noto+Sans+Devanagari'\n];\n\nexport function defaultFonts(weight = 400): EzogGoogleFont[] {\n    return googleFonts.map((font) => ({\n        type: 'googleFont',\n        name: `${font.split('+').join(' ')} ${weight}`,\n        googleFontName: font,\n        weight: weight\n    }));\n}\n","import { Font, Glyph, parse } from 'opentype.js';\nimport twemojiParser from 'twemoji-parser';\nimport twemoji from 'twemoji';\nimport { loadGoogleFont } from './font';\nimport { EzogFont } from './type';\nimport { encode } from 'base64-arraybuffer';\n\nexport async function generateTextPath(\n    text: string,\n    width: number,\n    fontSize: number,\n    lineHeight: number,\n    fonts: EzogFont[],\n    lineClamp?: number,\n    align: 'left' | 'right' | 'center' = 'left',\n    color = '#000',\n    fetch = globalThis.fetch\n) {\n    text = text.replace(/\\s+/g, ' ');\n\n    const opentypeFonts: Font[] = [];\n\n    for (const font of fonts) {\n        if (font.type == 'normalFont') {\n            if (font.data instanceof ArrayBuffer) {\n                opentypeFonts.push(parse(font.data));\n            } else {\n                opentypeFonts.push(parse(font.data.buffer));\n            }\n        } else {\n            const fontData = await loadGoogleFont(\n                `${font.googleFontName}:wght@${font.weight}`,\n                text + 'â€¦',\n                fetch\n            );\n            if (fontData) {\n                opentypeFonts.push(parse(fontData));\n            }\n        }\n    }\n\n    const wordSegmenter = new Intl.Segmenter(undefined, { granularity: 'word' });\n    const segments = [...wordSegmenter.segment(text)]\n        .map((seg) => {\n            const segments: { type: 'word' | 'emoji'; text: string }[] = [];\n            let lastIndex = 0;\n\n            for (const entity of twemojiParser.parse(seg.segment)) {\n                if (lastIndex < entity.indices[0]) {\n                    segments.push({\n                        type: 'word',\n                        text: seg.segment.slice(lastIndex, entity.indices[0])\n                    });\n                }\n\n                segments.push({ type: 'emoji', text: entity.text });\n                lastIndex = entity.indices[1];\n            }\n\n            if (lastIndex < seg.segment.length) {\n                segments.push({ type: 'word', text: seg.segment.slice(lastIndex) });\n            }\n\n            const cjkBreakAllSegments: { type: 'word' | 'emoji'; text: string }[] = [];\n\n            for (const segment of segments) {\n                if (segment.type == 'word') {\n                    let lastIndex = 0;\n\n                    for (const match of segment.text.matchAll(\n                        /\\p{scx=Hani}|\\p{scx=Hira}|\\p{scx=Kana}|\\p{scx=Hang}/gu\n                    )) {\n                        const index = match.index ?? 0;\n\n                        if (lastIndex < index) {\n                            cjkBreakAllSegments.push({\n                                type: 'word',\n                                text: segment.text.slice(lastIndex, match.index)\n                            });\n                        }\n\n                        cjkBreakAllSegments.push({\n                            type: 'word',\n                            text: match[0]\n                        });\n                        lastIndex = index + match[0].length;\n                    }\n\n                    if (lastIndex < segment.text.length) {\n                        cjkBreakAllSegments.push({\n                            type: 'word',\n                            text: segment.text.slice(lastIndex)\n                        });\n                    }\n                } else {\n                    cjkBreakAllSegments.push(segment);\n                }\n            }\n\n            return cjkBreakAllSegments;\n        })\n        .flat();\n\n    const chars: (\n        | {\n              type: 'glyph';\n              glyph: Glyph;\n              width: number;\n              fontIndex: number | null;\n              segmentIndex: number;\n          }\n        | {\n              type: 'image';\n              url: string;\n              width: number;\n              segmentIndex: number;\n          }\n    )[] = [];\n\n    for (let segmentIndex = 0; segmentIndex < segments.length; segmentIndex++) {\n        if (segments[segmentIndex].type == 'word') {\n            const wordGlyphs: {\n                type: 'glyph';\n                glyph: Glyph;\n                width: number;\n                fontIndex: number | null;\n                segmentIndex: number;\n            }[] = [];\n\n            for (let fontIndex = 0; fontIndex < opentypeFonts.length; fontIndex++) {\n                const fontGlyphs = opentypeFonts[fontIndex].stringToGlyphs(\n                    segments[segmentIndex].text\n                );\n\n                for (let charIndex = 0; charIndex < fontGlyphs.length; charIndex++) {\n                    const fontScale = fontSize / opentypeFonts[fontIndex].unitsPerEm;\n                    const advanceWidth =\n                        fontGlyphs[charIndex].advanceWidth ?? opentypeFonts[fontIndex].unitsPerEm;\n                    const glyphWidth = advanceWidth * fontScale;\n\n                    if (\n                        (wordGlyphs[charIndex] === undefined ||\n                            wordGlyphs[charIndex].fontIndex === null) &&\n                        fontGlyphs[charIndex].index != 0\n                    ) {\n                        wordGlyphs[charIndex] = {\n                            type: 'glyph',\n                            glyph: fontGlyphs[charIndex],\n                            width: glyphWidth,\n                            fontIndex,\n                            segmentIndex\n                        };\n                    } else if (wordGlyphs[charIndex] === undefined) {\n                        wordGlyphs[charIndex] = {\n                            type: 'glyph',\n                            glyph: fontGlyphs[charIndex],\n                            width: glyphWidth,\n                            fontIndex: null,\n                            segmentIndex\n                        };\n                    }\n                }\n            }\n\n            chars.push(...wordGlyphs);\n        } else {\n            const codePoint = twemoji.convert.toCodePoint(segments[segmentIndex].text);\n            const url = `https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/72x72/${codePoint}.png`;\n            chars.push({\n                type: 'image',\n                url,\n                width: fontSize,\n                segmentIndex\n            });\n        }\n    }\n\n    const renderOptions: opentype.RenderOptions = {};\n\n    const lines: {\n        startIndex: number;\n        endIndex: number;\n        width: number;\n    }[] = [];\n\n    for (let segmentIndex = 0; segmentIndex < segments.length; segmentIndex++) {\n        const segmentChars = chars.filter((char) => char.segmentIndex == segmentIndex);\n        let segmentWidth = segmentChars.reduce((sum, char) => sum + char.width, 0);\n\n        if (width < segmentWidth) {\n            for (let charIndex = 0; charIndex < segmentChars.length; charIndex++) {\n                const char = segmentChars[charIndex];\n\n                if (\n                    (charIndex == 0 && lines[lines.length - 1]?.width !== 0) ||\n                    width < lines[lines.length - 1].width + char.width\n                ) {\n                    let startIndex = 0;\n                    let endIndex = 0;\n                    let lineWidth = char.width;\n\n                    if (lines.length > 0) {\n                        startIndex = lines[lines.length - 1].endIndex;\n                        endIndex = lines[lines.length - 1].endIndex;\n                    }\n\n                    if (char.type == 'glyph' && char.glyph.unicode == 32) {\n                        startIndex += 1;\n                        lineWidth = 0;\n                    }\n\n                    lines.push({\n                        startIndex: startIndex,\n                        endIndex: endIndex + 1,\n                        width: lineWidth\n                    });\n                } else {\n                    lines[lines.length - 1].endIndex += 1;\n                    lines[lines.length - 1].width += char.width;\n                }\n            }\n        } else if (lines.length == 0 || width < lines[lines.length - 1].width + segmentWidth) {\n            const char = segmentChars[0];\n            let startIndex = 0;\n            let endIndex = 0;\n\n            if (lines.length > 0) {\n                startIndex = lines[lines.length - 1].endIndex;\n                endIndex = lines[lines.length - 1].endIndex;\n            }\n\n            if (char.type == 'glyph' && char.glyph.unicode == 32) {\n                startIndex += 1;\n                segmentWidth -= char.width;\n            }\n\n            lines.push({\n                startIndex: startIndex,\n                endIndex: endIndex + segmentChars.length,\n                width: segmentWidth\n            });\n        } else {\n            lines[lines.length - 1].endIndex += segmentChars.length;\n            lines[lines.length - 1].width += segmentWidth;\n        }\n    }\n\n    if (lineClamp !== undefined && lineClamp < lines.length) {\n        lines.length = lineClamp;\n\n        const ellipsisGlyph = opentypeFonts[0].charToGlyph('â€¦');\n        const fontScale = fontSize / opentypeFonts[0].unitsPerEm;\n        const ellipsisWidth =\n            (ellipsisGlyph.advanceWidth ?? opentypeFonts[0].unitsPerEm) * fontScale;\n        let ellipsisIndex = lines[lines.length - 1].endIndex;\n\n        for (\n            let i = 0;\n            i < lines[lines.length - 1].endIndex - lines[lines.length - 1].startIndex + 1;\n            i++\n        ) {\n            const charWidth = i == 0 ? 0 : chars[ellipsisIndex].width;\n            lines[lines.length - 1].width -= charWidth;\n\n            if (width >= lines[lines.length - 1].width + ellipsisWidth) {\n                chars.length = ellipsisIndex;\n                chars.push({\n                    type: 'glyph',\n                    glyph: ellipsisGlyph,\n                    width: ellipsisWidth,\n                    fontIndex: 0,\n                    segmentIndex: -1\n                });\n                lines[lines.length - 1].endIndex += 1 - i;\n                lines[lines.length - 1].width += ellipsisWidth;\n                break;\n            } else {\n                ellipsisIndex -= 1;\n            }\n        }\n    }\n\n    const svgs: string[] = [];\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n        let lineOffsetX = 0;\n        let charOffsetX = 0;\n\n        if (align === 'right') {\n            lineOffsetX = width - lines[lineIndex].width;\n        } else if (align === 'center') {\n            lineOffsetX = (width - lines[lineIndex].width) / 2;\n        }\n\n        for (\n            let charIndex = 0;\n            charIndex < lines[lineIndex].endIndex - lines[lineIndex].startIndex;\n            charIndex++\n        ) {\n            const char = chars[lines[lineIndex].startIndex + charIndex];\n\n            if (char.type == 'glyph') {\n                const path = char.glyph.getPath(\n                    lineOffsetX + charOffsetX,\n                    lineHeight * (lineIndex + 1) - (lineHeight - fontSize) / 2,\n                    fontSize,\n                    renderOptions\n                );\n                path.fill = color;\n                svgs.push(path.toSVG(2));\n            } else {\n                const x = lineOffsetX + charOffsetX;\n                const y = lineHeight * lineIndex + (lineHeight - fontSize) / 2;\n                const buffer = await (await fetch(char.url)).arrayBuffer();\n                const base64 = encode(buffer);\n                svgs.push(\n                    `<image x=\"${x}\" y=\"${y}\" width=\"${fontSize}\" height=\"${fontSize}\" href=\"data:image/png;base64,${base64}\" ></image>`\n                );\n            }\n\n            charOffsetX += char.width;\n        }\n    }\n\n    return svgs.join();\n}\n","import { encode } from 'base64-arraybuffer';\nimport { generateTextPath } from './text';\nimport { EzogElement, EzogFont, EzogOptions } from './type';\n\nexport async function generateSvg(elements: EzogElement[], options: EzogOptions) {\n    const elementSvgs = await Promise.all(\n        elements.map(async (element) => {\n            if (element.type == 'textBox') {\n                const fonts: EzogFont[] = [];\n\n                for (const fontName of element.fontFamily) {\n                    const font = options.fonts.find((font) => font.name == fontName);\n                    if (font) {\n                        fonts.push(font);\n                    }\n                }\n\n                return `\n                    <g transform=\"translate(${element.x}, ${element.y})\">\n                        ${await generateTextPath(\n                            element.text,\n                            element.width,\n                            element.fontSize,\n                            element.lineHeight,\n                            fonts,\n                            element.lineClamp,\n                            element.align,\n                            element.color,\n                            options.fetch\n                        )}\n                    </g>\n                `;\n            } else {\n                let url = 'data:image/png;base64,';\n                if (element.buffer instanceof ArrayBuffer) {\n                    url += encode(element.buffer);\n                } else {\n                    url += element.buffer.toString('base64');\n                }\n                return `<image x=\"${element.x}\" y=\"${element.y}\" width=\"${element.width}\" height=\"${element.height}\" href=\"${url}\" />`;\n            }\n        })\n    );\n\n    const svg = `\n        <svg width=\"${options.width}\" height=\"${options.height}\" viewBox=\"0, 0, ${options.width}, ${\n        options.height\n    }\" xmlns=\"http://www.w3.org/2000/svg\">\n            ${\n                options.background !== undefined\n                    ? `<rect x=\"0\" y=\"0\" width=\"${options.width}\" height=\"${options.height}\" fill=\"${options.background}\" />`\n                    : ''\n            }\n            ${elementSvgs.join('')}\n        </svg>\n    `;\n\n    return svg;\n}\n","import { Resvg } from '@resvg/resvg-js';\nimport { EzogElement, EzogOptions } from './type';\nimport { generateSvg } from './svg';\n\nexport async function generate(elements: EzogElement[], options: EzogOptions) {\n    const svg = await generateSvg(elements, options);\n\n    const resvg = new Resvg(svg, { fitTo: { mode: 'original' } });\n    const png = resvg.render().asPng();\n\n    return png;\n}\n"],"names":["segments","lastIndex","font"],"mappings":"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"}